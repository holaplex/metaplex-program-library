/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * Arguments used to create {@link PurchaseTicket}
 * @category Accounts
 * @category generated
 */
export type PurchaseTicketArgs = {
  buyer: web3.PublicKey;
  seller: web3.PublicKey;
  metadata: web3.PublicKey;
  rewardCenter: web3.PublicKey;
  tokenSize: beet.bignum;
  price: beet.bignum;
  createdAt: beet.bignum;
};

const purchaseTicketDiscriminator = [253, 34, 93, 204, 5, 153, 33, 126];
/**
 * Holds the data for the {@link PurchaseTicket} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class PurchaseTicket implements PurchaseTicketArgs {
  private constructor(
    readonly buyer: web3.PublicKey,
    readonly seller: web3.PublicKey,
    readonly metadata: web3.PublicKey,
    readonly rewardCenter: web3.PublicKey,
    readonly tokenSize: beet.bignum,
    readonly price: beet.bignum,
    readonly createdAt: beet.bignum,
  ) {}

  /**
   * Creates a {@link PurchaseTicket} instance from the provided args.
   */
  static fromArgs(args: PurchaseTicketArgs) {
    return new PurchaseTicket(
      args.buyer,
      args.seller,
      args.metadata,
      args.rewardCenter,
      args.tokenSize,
      args.price,
      args.createdAt,
    );
  }

  /**
   * Deserializes the {@link PurchaseTicket} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [PurchaseTicket, number] {
    return PurchaseTicket.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link PurchaseTicket} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<PurchaseTicket> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find PurchaseTicket account at ${address}`);
    }
    return PurchaseTicket.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link PurchaseTicket} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [PurchaseTicket, number] {
    return purchaseTicketBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link PurchaseTicket} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return purchaseTicketBeet.serialize({
      accountDiscriminator: purchaseTicketDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link PurchaseTicket}
   */
  static get byteSize() {
    return purchaseTicketBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link PurchaseTicket} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(PurchaseTicket.byteSize, commitment);
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link PurchaseTicket} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === PurchaseTicket.byteSize;
  }

  /**
   * Returns a readable version of {@link PurchaseTicket} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      buyer: this.buyer.toBase58(),
      seller: this.seller.toBase58(),
      metadata: this.metadata.toBase58(),
      rewardCenter: this.rewardCenter.toBase58(),
      tokenSize: (() => {
        const x = <{ toNumber: () => number }>this.tokenSize;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      price: (() => {
        const x = <{ toNumber: () => number }>this.price;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      createdAt: (() => {
        const x = <{ toNumber: () => number }>this.createdAt;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const purchaseTicketBeet = new beet.BeetStruct<
  PurchaseTicket,
  PurchaseTicketArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['buyer', beetSolana.publicKey],
    ['seller', beetSolana.publicKey],
    ['metadata', beetSolana.publicKey],
    ['rewardCenter', beetSolana.publicKey],
    ['tokenSize', beet.u64],
    ['price', beet.u64],
    ['createdAt', beet.i64],
  ],
  PurchaseTicket.fromArgs,
  'PurchaseTicket',
);
