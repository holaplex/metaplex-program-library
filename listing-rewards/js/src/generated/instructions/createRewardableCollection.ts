/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import {
  CreateRewardableCollectionParams,
  createRewardableCollectionParamsBeet,
} from '../types/CreateRewardableCollectionParams';

/**
 * @category Instructions
 * @category CreateRewardableCollection
 * @category generated
 */
export type CreateRewardableCollectionInstructionArgs = {
  rewardableCollectionParams: CreateRewardableCollectionParams;
};
/**
 * @category Instructions
 * @category CreateRewardableCollection
 * @category generated
 */
const createRewardableCollectionStruct = new beet.BeetArgsStruct<
  CreateRewardableCollectionInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['rewardableCollectionParams', createRewardableCollectionParamsBeet],
  ],
  'CreateRewardableCollectionInstructionArgs',
);
/**
 * Accounts required by the _createRewardableCollection_ instruction
 *
 * @property [_writable_, **signer**] wallet
 * @property [_writable_] rewardableCollection
 * @property [] auctionHouse
 * @property [] rewardCenter
 * @category Instructions
 * @category CreateRewardableCollection
 * @category generated
 */
export type CreateRewardableCollectionInstructionAccounts = {
  wallet: web3.PublicKey;
  rewardableCollection: web3.PublicKey;
  auctionHouse: web3.PublicKey;
  rewardCenter: web3.PublicKey;
};

const createRewardableCollectionInstructionDiscriminator = [246, 96, 11, 174, 205, 105, 30, 151];

/**
 * Creates a _CreateRewardableCollection_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateRewardableCollection
 * @category generated
 */
export function createCreateRewardableCollectionInstruction(
  accounts: CreateRewardableCollectionInstructionAccounts,
  args: CreateRewardableCollectionInstructionArgs,
) {
  const { wallet, rewardableCollection, auctionHouse, rewardCenter } = accounts;

  const [data] = createRewardableCollectionStruct.serialize({
    instructionDiscriminator: createRewardableCollectionInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: wallet,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: rewardableCollection,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: auctionHouse,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: rewardCenter,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('rwdLstiU8aJU1DPdoPtocaNKApMhCFdCg283hz8dd3u'),
    keys,
    data,
  });
  return ix;
}
