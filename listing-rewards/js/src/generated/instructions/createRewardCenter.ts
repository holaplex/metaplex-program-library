/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import {
  CreateRewardCenterParams,
  createRewardCenterParamsBeet,
} from '../types/CreateRewardCenterParams';

/**
 * @category Instructions
 * @category CreateRewardCenter
 * @category generated
 */
export type CreateRewardCenterInstructionArgs = {
  createRewardCenterParams: CreateRewardCenterParams;
};
/**
 * @category Instructions
 * @category CreateRewardCenter
 * @category generated
 */
const createRewardCenterStruct = new beet.BeetArgsStruct<
  CreateRewardCenterInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['createRewardCenterParams', createRewardCenterParamsBeet],
  ],
  'CreateRewardCenterInstructionArgs',
);
/**
 * Accounts required by the _createRewardCenter_ instruction
 *
 * @property [_writable_, **signer**] wallet
 * @property [] mint
 * @property [_writable_] associatedTokenAccount
 * @property [] auctionHouse
 * @property [_writable_] rewardCenter
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category CreateRewardCenter
 * @category generated
 */
export type CreateRewardCenterInstructionAccounts = {
  wallet: web3.PublicKey;
  mint: web3.PublicKey;
  associatedTokenAccount: web3.PublicKey;
  auctionHouse: web3.PublicKey;
  rewardCenter: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
};

const createRewardCenterInstructionDiscriminator = [51, 138, 29, 157, 96, 169, 51, 139];

/**
 * Creates a _CreateRewardCenter_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category CreateRewardCenter
 * @category generated
 */
export function createCreateRewardCenterInstruction(
  accounts: CreateRewardCenterInstructionAccounts,
  args: CreateRewardCenterInstructionArgs,
) {
  const {
    wallet,
    mint,
    associatedTokenAccount,
    auctionHouse,
    rewardCenter,
    associatedTokenProgram,
  } = accounts;

  const [data] = createRewardCenterStruct.serialize({
    instructionDiscriminator: createRewardCenterInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: wallet,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: associatedTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: auctionHouse,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: rewardCenter,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('rwdLstiU8aJU1DPdoPtocaNKApMhCFdCg283hz8dd3u'),
    keys,
    data,
  });
  return ix;
}
