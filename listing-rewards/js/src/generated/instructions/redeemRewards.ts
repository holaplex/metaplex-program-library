/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';

/**
 * @category Instructions
 * @category RedeemRewards
 * @category generated
 */
const redeemRewardsStruct = new beet.BeetArgsStruct<{
  instructionDiscriminator: number[] /* size: 8 */;
}>(
  [['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)]],
  'RedeemRewardsInstructionArgs',
);
/**
 * Accounts required by the _redeemRewards_ instruction
 *
 * @property [] listing
 * @property [_writable_, **signer**] wallet
 * @property [_writable_] rewardCenterAssociatedTokenAccount
 * @property [] metadata
 * @property [_writable_] walletAssociatedTokenAccount
 * @property [] mint
 * @property [] rewardCenter
 * @property [] rewardableCollection
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category RedeemRewards
 * @category generated
 */
export type RedeemRewardsInstructionAccounts = {
  listing: web3.PublicKey;
  wallet: web3.PublicKey;
  rewardCenterAssociatedTokenAccount: web3.PublicKey;
  metadata: web3.PublicKey;
  walletAssociatedTokenAccount: web3.PublicKey;
  mint: web3.PublicKey;
  rewardCenter: web3.PublicKey;
  rewardableCollection: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
};

const redeemRewardsInstructionDiscriminator = [78, 170, 139, 171, 145, 182, 60, 55];

/**
 * Creates a _RedeemRewards_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @category Instructions
 * @category RedeemRewards
 * @category generated
 */
export function createRedeemRewardsInstruction(accounts: RedeemRewardsInstructionAccounts) {
  const {
    listing,
    wallet,
    rewardCenterAssociatedTokenAccount,
    metadata,
    walletAssociatedTokenAccount,
    mint,
    rewardCenter,
    rewardableCollection,
    associatedTokenProgram,
  } = accounts;

  const [data] = redeemRewardsStruct.serialize({
    instructionDiscriminator: redeemRewardsInstructionDiscriminator,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: listing,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: wallet,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: rewardCenterAssociatedTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: metadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: walletAssociatedTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: rewardCenter,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: rewardableCollection,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('rwdLstiU8aJU1DPdoPtocaNKApMhCFdCg283hz8dd3u'),
    keys,
    data,
  });
  return ix;
}
