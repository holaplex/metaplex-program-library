/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from '@solana/spl-token';
import * as beet from '@metaplex-foundation/beet';
import * as web3 from '@solana/web3.js';
import { UpdateOfferParams, updateOfferParamsBeet } from '../types/UpdateOfferParams';

/**
 * @category Instructions
 * @category UpdateOffer
 * @category generated
 */
export type UpdateOfferInstructionArgs = {
  updateOfferParams: UpdateOfferParams;
};
/**
 * @category Instructions
 * @category UpdateOffer
 * @category generated
 */
const updateOfferStruct = new beet.BeetArgsStruct<
  UpdateOfferInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['instructionDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['updateOfferParams', updateOfferParamsBeet],
  ],
  'UpdateOfferInstructionArgs',
);
/**
 * Accounts required by the _updateOffer_ instruction
 *
 * @property [_writable_, **signer**] wallet
 * @property [_writable_] offer
 * @property [] rewardCenter
 * @property [] auctionHouse
 * @property [] authority
 * @property [_writable_] buyerTokenAccount
 * @property [] transferAuthority
 * @property [] treasuryMint
 * @property [] tokenAccount
 * @property [_writable_] auctionHouseFeeAccount
 * @property [] metadata
 * @property [_writable_] escrowPaymentAccount
 * @property [] ahAuctioneerPda
 * @property [] auctionHouseProgram
 * @category Instructions
 * @category UpdateOffer
 * @category generated
 */
export type UpdateOfferInstructionAccounts = {
  wallet: web3.PublicKey;
  offer: web3.PublicKey;
  rewardCenter: web3.PublicKey;
  auctionHouse: web3.PublicKey;
  authority: web3.PublicKey;
  buyerTokenAccount: web3.PublicKey;
  transferAuthority: web3.PublicKey;
  treasuryMint: web3.PublicKey;
  tokenAccount: web3.PublicKey;
  auctionHouseFeeAccount: web3.PublicKey;
  metadata: web3.PublicKey;
  escrowPaymentAccount: web3.PublicKey;
  ahAuctioneerPda: web3.PublicKey;
  auctionHouseProgram: web3.PublicKey;
};

const updateOfferInstructionDiscriminator = [191, 70, 15, 66, 224, 2, 249, 223];

/**
 * Creates a _UpdateOffer_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category UpdateOffer
 * @category generated
 */
export function createUpdateOfferInstruction(
  accounts: UpdateOfferInstructionAccounts,
  args: UpdateOfferInstructionArgs,
) {
  const {
    wallet,
    offer,
    rewardCenter,
    auctionHouse,
    authority,
    buyerTokenAccount,
    transferAuthority,
    treasuryMint,
    tokenAccount,
    auctionHouseFeeAccount,
    metadata,
    escrowPaymentAccount,
    ahAuctioneerPda,
    auctionHouseProgram,
  } = accounts;

  const [data] = updateOfferStruct.serialize({
    instructionDiscriminator: updateOfferInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: wallet,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: offer,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: rewardCenter,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: auctionHouse,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: authority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: buyerTokenAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: transferAuthority,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: treasuryMint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: tokenAccount,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: auctionHouseFeeAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: metadata,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: escrowPaymentAccount,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: ahAuctioneerPda,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: auctionHouseProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.ASSOCIATED_TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  const ix = new web3.TransactionInstruction({
    programId: new web3.PublicKey('rwdLstiU8aJU1DPdoPtocaNKApMhCFdCg283hz8dd3u'),
    keys,
    data,
  });
  return ix;
}
