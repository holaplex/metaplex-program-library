/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * Arguments used to create {@link Offer}
 * @category Accounts
 * @category generated
 */
export type OfferArgs = {
  rewardCenter: web3.PublicKey;
  buyer: web3.PublicKey;
  metadata: web3.PublicKey;
  price: beet.bignum;
  tokenSize: beet.bignum;
  bump: number;
  createdAt: beet.bignum;
  canceledAt: beet.COption<beet.bignum>;
  purchasedAt: beet.COption<beet.bignum>;
  rewardableCollection: web3.PublicKey;
};

const offerDiscriminator = [215, 88, 60, 71, 170, 162, 73, 229];
/**
 * Holds the data for the {@link Offer} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Offer implements OfferArgs {
  private constructor(
    readonly rewardCenter: web3.PublicKey,
    readonly buyer: web3.PublicKey,
    readonly metadata: web3.PublicKey,
    readonly price: beet.bignum,
    readonly tokenSize: beet.bignum,
    readonly bump: number,
    readonly createdAt: beet.bignum,
    readonly canceledAt: beet.COption<beet.bignum>,
    readonly purchasedAt: beet.COption<beet.bignum>,
    readonly rewardableCollection: web3.PublicKey,
  ) {}

  /**
   * Creates a {@link Offer} instance from the provided args.
   */
  static fromArgs(args: OfferArgs) {
    return new Offer(
      args.rewardCenter,
      args.buyer,
      args.metadata,
      args.price,
      args.tokenSize,
      args.bump,
      args.createdAt,
      args.canceledAt,
      args.purchasedAt,
      args.rewardableCollection,
    );
  }

  /**
   * Deserializes the {@link Offer} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(accountInfo: web3.AccountInfo<Buffer>, offset = 0): [Offer, number] {
    return Offer.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Offer} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<Offer> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find Offer account at ${address}`);
    }
    return Offer.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link Offer} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Offer, number] {
    return offerBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Offer} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return offerBeet.serialize({
      accountDiscriminator: offerDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Offer} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: OfferArgs) {
    const instance = Offer.fromArgs(args);
    return offerBeet.toFixedFromValue({
      accountDiscriminator: offerDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Offer} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: OfferArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(Offer.byteSize(args), commitment);
  }

  /**
   * Returns a readable version of {@link Offer} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      rewardCenter: this.rewardCenter.toBase58(),
      buyer: this.buyer.toBase58(),
      metadata: this.metadata.toBase58(),
      price: (() => {
        const x = <{ toNumber: () => number }>this.price;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      tokenSize: (() => {
        const x = <{ toNumber: () => number }>this.tokenSize;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      bump: this.bump,
      createdAt: (() => {
        const x = <{ toNumber: () => number }>this.createdAt;
        if (typeof x.toNumber === 'function') {
          try {
            return x.toNumber();
          } catch (_) {
            return x;
          }
        }
        return x;
      })(),
      canceledAt: this.canceledAt,
      purchasedAt: this.purchasedAt,
      rewardableCollection: this.rewardableCollection.toBase58(),
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const offerBeet = new beet.FixableBeetStruct<
  Offer,
  OfferArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['rewardCenter', beetSolana.publicKey],
    ['buyer', beetSolana.publicKey],
    ['metadata', beetSolana.publicKey],
    ['price', beet.u64],
    ['tokenSize', beet.u64],
    ['bump', beet.u8],
    ['createdAt', beet.i64],
    ['canceledAt', beet.coption(beet.i64)],
    ['purchasedAt', beet.coption(beet.i64)],
    ['rewardableCollection', beetSolana.publicKey],
  ],
  Offer.fromArgs,
  'Offer',
);
