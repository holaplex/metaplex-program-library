/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from '@solana/web3.js';
import * as beet from '@metaplex-foundation/beet';
import * as beetSolana from '@metaplex-foundation/beet-solana';

/**
 * Arguments used to create {@link RewardableCollection}
 * @category Accounts
 * @category generated
 */
export type RewardableCollectionArgs = {
  isInitialized: boolean;
  maintainer: web3.PublicKey;
  collection: web3.PublicKey;
  rewardCenter: web3.PublicKey;
  bump: number;
  deletedAt: beet.COption<beet.bignum>;
};

const rewardableCollectionDiscriminator = [174, 5, 246, 146, 105, 142, 142, 200];
/**
 * Holds the data for the {@link RewardableCollection} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class RewardableCollection implements RewardableCollectionArgs {
  private constructor(
    readonly isInitialized: boolean,
    readonly maintainer: web3.PublicKey,
    readonly collection: web3.PublicKey,
    readonly rewardCenter: web3.PublicKey,
    readonly bump: number,
    readonly deletedAt: beet.COption<beet.bignum>,
  ) {}

  /**
   * Creates a {@link RewardableCollection} instance from the provided args.
   */
  static fromArgs(args: RewardableCollectionArgs) {
    return new RewardableCollection(
      args.isInitialized,
      args.maintainer,
      args.collection,
      args.rewardCenter,
      args.bump,
      args.deletedAt,
    );
  }

  /**
   * Deserializes the {@link RewardableCollection} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0,
  ): [RewardableCollection, number] {
    return RewardableCollection.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link RewardableCollection} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
  ): Promise<RewardableCollection> {
    const accountInfo = await connection.getAccountInfo(address);
    if (accountInfo == null) {
      throw new Error(`Unable to find RewardableCollection account at ${address}`);
    }
    return RewardableCollection.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Deserializes the {@link RewardableCollection} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [RewardableCollection, number] {
    return rewardableCollectionBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link RewardableCollection} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return rewardableCollectionBeet.serialize({
      accountDiscriminator: rewardableCollectionDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link RewardableCollection} for the provided args.
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   */
  static byteSize(args: RewardableCollectionArgs) {
    const instance = RewardableCollection.fromArgs(args);
    return rewardableCollectionBeet.toFixedFromValue({
      accountDiscriminator: rewardableCollectionDiscriminator,
      ...instance,
    }).byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link RewardableCollection} data from rent
   *
   * @param args need to be provided since the byte size for this account
   * depends on them
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    args: RewardableCollectionArgs,
    connection: web3.Connection,
    commitment?: web3.Commitment,
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      RewardableCollection.byteSize(args),
      commitment,
    );
  }

  /**
   * Returns a readable version of {@link RewardableCollection} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      isInitialized: this.isInitialized,
      maintainer: this.maintainer.toBase58(),
      collection: this.collection.toBase58(),
      rewardCenter: this.rewardCenter.toBase58(),
      bump: this.bump,
      deletedAt: this.deletedAt,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const rewardableCollectionBeet = new beet.FixableBeetStruct<
  RewardableCollection,
  RewardableCollectionArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ['accountDiscriminator', beet.uniformFixedSizeArray(beet.u8, 8)],
    ['isInitialized', beet.bool],
    ['maintainer', beetSolana.publicKey],
    ['collection', beetSolana.publicKey],
    ['rewardCenter', beetSolana.publicKey],
    ['bump', beet.u8],
    ['deletedAt', beet.coption(beet.i64)],
  ],
  RewardableCollection.fromArgs,
  'RewardableCollection',
);
